{
    "blogs": [
        {
            "blogID": "abc10xyz2024",
            "blogAuthor": "Mehmet Güngör",
            "blogCTime": "21/July/2024",
            "blogCTimeDetail": "12:45",
            "blogTitle": "Node.js Çalışma Zamanı(Runtime) Nedir?",
            "blogMainImage": "/images/nojs-system.jpg",
            "blogShareLink": "https://blog.esesoftware.com/mehmet-gungor-what-is-node-js-runtime",
            "blogCardSummaryContent": "Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır.",
            "blogHeaders": {
                "giris": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk1", "href": "#entryforObserver1", "sHeader":"Node.js Çalışma Zamanı Nedir?"},
                        {"id": "navLİnk2", "href": "#entryforObserver2", "sHeader":"Node.js Runtime'ın Temel Bileşenleri"}
                    ]
                },
                "gelisme": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk3", "href": "#entryforObserver3", "sHeader":"Olay Döngüsünün İşleyişi"},
                        {"id": "navLİnk4", "href": "#entryforObserver4", "sHeader":"Asenkron ve Non-blocking I/O"},
                        {"id": "navLİnk5", "href": "#entryforObserver5", "sHeader":"İş Parçacığı Havuzu (Thread Pool)"}
                    ]
                },
                "sonuc": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk6", "href": "#entryforObserver6", "sHeader":"Modüler Yapı ve npm"},
                        {"id": "navLİnk7", "href": "#entryforObserver7", "sHeader":"Sonuç"}
                    ]
                }
            },
            "blogContents": {
                "girisContents": [
                    {
                        "id": "entryforObserver1",
                        "ctnrCount": 3,
                        "ordinaryContents": [
                            {
                                "content": "<h2 class=\"font-merriweather text-2xl sm:text-3xl md:text-4xl my-6 text-[#422d48] leading-[48px]\">Node.js Çalışma Zamanı(Runtime) Nedir?</h2>"
                            },
                            {
                                "content": "<img class=\"w-full block cursor-zoom-in my-8\" src=\"../../images/nojs-system.jpg\" alt=\"NodeJS Runtime\">"
                            },
                            {
                                "content": "<p class=\"leading-6 indent-4\">Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır. Bu makalede, Node.js runtime ifadesinin teknik detaylarını, iç yapılarını ve işleyişini derinlemesine inceleyeceğiz.</p>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver2",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Node.js Runtime'ın Temel Bileşenleri</h3>\n"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><h4 class=\"font-semibold\">V8 JavaScript Motoru</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">V8, Google'ın Chrome tarayıcısı için geliştirdiği yüksek performanslı JavaScript motorudur. V8, JavaScript kodunu makine diline çevirir ve doğrudan çalıştırır.</p></li><li><p class=\"\">Node.js, V8 motorunu kullanarak JavaScript'in sunucu tarafında hızlı ve verimli çalışmasını sağlar.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Libuv</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Libuv, asenkron I/O işlemlerini yöneten ve olay döngüsünü (event loop) sağlayan bir kütüphanedir. Libuv, platform bağımsızdır ve Node.js'in çeşitli işletim sistemlerinde çalışmasını mümkün kılar.</p></li><li><p class=\"\">Olay döngüsü, dosya sistemi, DNS, ağ ve diğer zamanlanmış işlemleri yönetir.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Olay Döngüsü (Event Loop)</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Olay döngüsü, Node.js'in çekirdeğinde yer alır ve tüm asenkron işlemleri yönetir. Olay döngüsü, tek bir iş parçacığı üzerinde çalışır ve non-blocking I/O işlemlerini etkin bir şekilde yönetir.</p></li></ul></li></ul>\n"
                            }
                        ]
                    }
                ],
                "gelismeContents": [
                    {
                        "id": "entryforObserver3",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Olay Döngüsünün İşleyişi</h3><p class=\"leading-6 indent-4 mb-4\">Olay döngüsü, Node.js'in en önemli bileşenlerinden biridir. Olay döngüsü, sürekli olarak çalışır ve farklı aşamalardan geçer. Bu aşamalar şunlardır:</p>"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><p><span class=\"font-semibold\">Timers:</span> setTimeout ve setInterval gibi zamanlayıcı fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Pending Callbacks:</span> Önceki döngüde tamamlanan bazı I/O işlemlerinin geri çağırma fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Idle, Prepare:</span> İç kullanım için ayrılmıştır ve genellikle geliştiriciler tarafından doğrudan kullanılmaz.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Poll:</span> Yeni I/O olaylarını alır ve uygun geri çağırma fonksiyonlarını çalıştırır. Bu aşama, olay döngüsünün kalbidir.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Check:</span> setImmediate ile zamanlanmış işlevler burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Close Callbacks:</span> Kapanış olaylarını (örneğin, socket.on('close')) işler.</p></li></ul>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver4",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Asenkron ve Non-blocking I/O</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, asenkron ve non-blocking I/O modelini benimseyerek yüksek performans sağlar. Bu model, bir I/O işleminin tamamlanmasını beklemeden diğer işlemlerin devam etmesine olanak tanır.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Non-blocking I/O</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">fs</span> = <span class=\"require\">require</span>('<span class=\"string\">fs</span>');\n\nfs.<span class=\"function\">readFile</span>('<span class=\"string\">example.txt</span>', '<span class=\"string\">utf-8</span>', (<span class=\"keyword\">err</span>, <span class=\"keyword\">data</span>) => {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) {\n        <span class=\"class\">console</span>.<span class=\"function\">error</span>(<span class=\"keyword\">err</span>);\n        <span class=\"keyword\">return</span>;\n    }\n    <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"keyword\">data</span>);\n});\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">Dosya okuma işlemi başlatıldı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, readFile fonksiyonu non-blocking bir şekilde çalışır ve dosya okuma işlemi tamamlanmadan console.log('Dosya okuma işlemi başlatıldı') satırı çalıştırılır. Bu, Node.js'in yüksek performanslı olmasını sağlayan temel mekanizmadır.</span></div>"
                            }                            
                        ]
                    },
                    {
                        "id": "entryforObserver5",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">İş Parçacığı Havuzu (Thread Pool)</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, CPU yoğun işlemler ve bazı I/O işlemleri için bir iş parçacığı havuzu kullanır. Varsayılan olarak, Node.js dört iş parçacığı oluşturur, ancak UV_THREADPOOL_SIZE ortam değişkeni kullanılarak bu sayı artırılabilir.</p>"
                            },
                            {
                                "content": "<span class=\"font-semibold text-sm inline-block my-2\">Örnek: İş Parçacığı Havuzu Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">crypto</span> = <span class=\"require\">require</span>('<span class=\"string\">crypto</span>');\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"variable\">i</span> = <span class=\"number\">0</span>; <span class=\"variable\">i</span> &lt; <span class=\"number\">4</span>; <span class=\"variable\">i</span>++) {\n    <span class=\"variable\">crypto</span>.<span class=\"function\">pbkdf2</span>('<span class=\"string\">password</span>', '<span class=\"string\">salt</span>', <span class=\"number\">100000</span>, <span class=\"number\">64</span>, '<span class=\"string\">sha512</span>', (<span class=\"keyword\">err</span>, <span class=\"variable\">derivedKey</span>) =&gt; {\n        <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">err</span>;\n        <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"variable\">derivedKey</span>.<span class=\"function\">toString</span>('<span class=\"string\">hex</span>'));\n    });\n}\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">İş parçacığı havuzu kullanımı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, crypto.pbkdf2 fonksiyonu iş parçacığı havuzunu kullanır ve dört ayrı iş parçacığında paralel olarak çalışır.</span>"
                            }                        
                        ]
                    }
                ],
                "sonucContents": [
                    {
                        "id": "entryforObserver6",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Modüler Yapı ve npm</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, modüler bir yapıya sahiptir ve npm (Node Package Manager) ile genişletilebilir. Bu, geliştiricilerin projelerine kolayca üçüncü parti paketler eklemesini sağlar.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Basit Bir Modül Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto px-4\"><span class=\"text-gray-500\">// myModule.js</span>\n<span class=\"keyword\">module</span>.<span class=\"variable\">exports</span> = {\n    <span class=\"function\">sayHello</span>: function() {\n        console.<span class=\"function\">log</span>('<span class=\"string\">Hello, world!</span>');\n    }\n};\n\n<span class=\"text-gray-500\">// main.js</span>\n<span class=\"keyword\">const</span> myModule = <span class=\"require\">require</span>('./myModule');\nmyModule.<span class=\"function\">sayHello</span>();</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, myModule.js adlı bir modül oluşturulmuş ve main.js dosyasında bu modül kullanılmıştır.</span></div>"
                            }                     
                        ]
                    },
                    {
                        "id": "entryforObserver7",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Sonuç</h3><p class=\"leading-6 indent-4 mb-4\">Node.js runtime, modern web uygulamaları ve sunucu tarafı programlama için güçlü ve esnek bir ortam sağlar. V8 motoru, Libuv kütüphanesi, olay döngüsü ve asenkron I/O modeli, Node.js'in yüksek performans ve ölçeklenebilirlik sunmasını sağlar. Node.js'in modüler yapısı ve geniş npm ekosistemi, geliştiricilerin projelerini hızlı ve verimli bir şekilde geliştirmesine olanak tanır. Bu teknik inceleme, Node.js runtime ifadesinin derinlemesine anlaşılmasına katkıda bulunmayı amaçlamaktadır.</p>"
                            }
                        ]
                    }
                ]
            },
            "blogComments": {
                "blogCommentCounts": 2,
                "comments": [
                    {
                        "commentId": "abc10xyz2024c1",
                        "commentCTime": "21/July/2024",
                        "commentCTimeDetail": "2024-07-22T16:39:00.000Z",
                        "commentUserId": "userr155911x",
                        "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Asperiores sunt enim ducimus quae consequatur dolore nisi. Fuga animi velit distinctio eius recusandae incidunt magnam odio. (Fonksiyon deneme yorumu..)",
                        "commentLikeCount": 3,
                        "commentReportCount": 0
                    },
                    {
                        "commentId": "abc10xyz2024c2",
                        "commentCTime": "23/July/2024",
                        "commentCTimeDetail": "2024-07-22T14:36:00.000Z",
                        "commentUserId": "userr155912x",
                        "commentContent": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Eos nemo cum aliquid quos quo fuga ipsum porro voluptate accusamus, a maxime animi, amet dolorum totam, iure deleniti quae. Labore ducimus expedita assumenda eaque quod non sit ad omnis laboriosam. Quae aliquid dolore mollitia quaerat quidem? (Fonksiyon deneme yorumu..)",
                        "commentLikeCount": 20,
                        "commentReportCount": 0
                    }
                ]
            }
        },
        {
            "blogID": "abc11xyz2024",
            "blogAuthor": "Mehmet Güngör",
            "blogCTime": "21/July/2024",
            "blogTitle": "Node.js Çalışma Zamanı(Runtime) Nedir?",
            "blogMainImage": "/images/nojs-system.jpg",
            "blogShareLink": "-",
            "blogCardSummaryContent": "Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır.",
            "blogHeaders": {
                "giris": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk1", "href": "#entryforObserver1", "sHeader":"Node.js Çalışma Zamanı Nedir?"},
                        {"id": "navLİnk2", "href": "#entryforObserver2", "sHeader":"Node.js Runtime'ın Temel Bileşenleri"}
                    ]
                },
                "gelisme": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk3", "href": "#entryforObserver3", "sHeader":"Olay Döngüsünün İşleyişi"},
                        {"id": "navLİnk4", "href": "#entryforObserver4", "sHeader":"Asenkron ve Non-blocking I/O"},
                        {"id": "navLİnk5", "href": "#entryforObserver5", "sHeader":"İş Parçacığı Havuzu (Thread Pool)"}
                    ]
                },
                "sonuc": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk6", "href": "#entryforObserver6", "sHeader":"Modüler Yapı ve npm"},
                        {"id": "navLİnk7", "href": "#entryforObserver7", "sHeader":"Sonuç"}
                    ]
                }
            },
            "blogContents": {
                "girisContents": [
                    {
                        "id": "entryforObserver1",
                        "ctnrCount": 3,
                        "ordinaryContents": [
                            {
                                "content": "<h2 class=\"font-merriweather text-2xl sm:text-3xl md:text-4xl my-6 text-[#422d48] leading-[48px]\">Node.js Çalışma Zamanı(Runtime) Nedir?</h2>"
                            },
                            {
                                "content": "<img class=\"w-full block cursor-zoom-in my-8\" src=\"../../images/nojs-system.jpg\" alt=\"NodeJS Runtime\">"
                            },
                            {
                                "content": "<p class=\"leading-6 indent-4\">Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır. Bu makalede, Node.js runtime ifadesinin teknik detaylarını, iç yapılarını ve işleyişini derinlemesine inceleyeceğiz.</p>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver2",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Node.js Runtime'ın Temel Bileşenleri</h3>\n"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><h4 class=\"font-semibold\">V8 JavaScript Motoru</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">V8, Google'ın Chrome tarayıcısı için geliştirdiği yüksek performanslı JavaScript motorudur. V8, JavaScript kodunu makine diline çevirir ve doğrudan çalıştırır.</p></li><li><p class=\"\">Node.js, V8 motorunu kullanarak JavaScript'in sunucu tarafında hızlı ve verimli çalışmasını sağlar.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Libuv</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Libuv, asenkron I/O işlemlerini yöneten ve olay döngüsünü (event loop) sağlayan bir kütüphanedir. Libuv, platform bağımsızdır ve Node.js'in çeşitli işletim sistemlerinde çalışmasını mümkün kılar.</p></li><li><p class=\"\">Olay döngüsü, dosya sistemi, DNS, ağ ve diğer zamanlanmış işlemleri yönetir.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Olay Döngüsü (Event Loop)</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Olay döngüsü, Node.js'in çekirdeğinde yer alır ve tüm asenkron işlemleri yönetir. Olay döngüsü, tek bir iş parçacığı üzerinde çalışır ve non-blocking I/O işlemlerini etkin bir şekilde yönetir.</p></li></ul></li></ul>\n"
                            }
                        ]
                    }
                ],
                "gelismeContents": [
                    {
                        "id": "entryforObserver3",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Olay Döngüsünün İşleyişi</h3><p class=\"leading-6 indent-4 mb-4\">Olay döngüsü, Node.js'in en önemli bileşenlerinden biridir. Olay döngüsü, sürekli olarak çalışır ve farklı aşamalardan geçer. Bu aşamalar şunlardır:</p>"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><p><span class=\"font-semibold\">Timers:</span> setTimeout ve setInterval gibi zamanlayıcı fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Pending Callbacks:</span> Önceki döngüde tamamlanan bazı I/O işlemlerinin geri çağırma fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Idle, Prepare:</span> İç kullanım için ayrılmıştır ve genellikle geliştiriciler tarafından doğrudan kullanılmaz.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Poll:</span> Yeni I/O olaylarını alır ve uygun geri çağırma fonksiyonlarını çalıştırır. Bu aşama, olay döngüsünün kalbidir.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Check:</span> setImmediate ile zamanlanmış işlevler burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Close Callbacks:</span> Kapanış olaylarını (örneğin, socket.on('close')) işler.</p></li></ul>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver4",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Asenkron ve Non-blocking I/O</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, asenkron ve non-blocking I/O modelini benimseyerek yüksek performans sağlar. Bu model, bir I/O işleminin tamamlanmasını beklemeden diğer işlemlerin devam etmesine olanak tanır.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Non-blocking I/O</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">fs</span> = <span class=\"require\">require</span>('<span class=\"string\">fs</span>');\n\nfs.<span class=\"function\">readFile</span>('<span class=\"string\">example.txt</span>', '<span class=\"string\">utf-8</span>', (<span class=\"keyword\">err</span>, <span class=\"keyword\">data</span>) => {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) {\n        <span class=\"class\">console</span>.<span class=\"function\">error</span>(<span class=\"keyword\">err</span>);\n        <span class=\"keyword\">return</span>;\n    }\n    <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"keyword\">data</span>);\n});\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">Dosya okuma işlemi başlatıldı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, readFile fonksiyonu non-blocking bir şekilde çalışır ve dosya okuma işlemi tamamlanmadan console.log('Dosya okuma işlemi başlatıldı') satırı çalıştırılır. Bu, Node.js'in yüksek performanslı olmasını sağlayan temel mekanizmadır.</span></div>"
                            }                            
                        ]
                    },
                    {
                        "id": "entryforObserver5",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">İş Parçacığı Havuzu (Thread Pool)</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, CPU yoğun işlemler ve bazı I/O işlemleri için bir iş parçacığı havuzu kullanır. Varsayılan olarak, Node.js dört iş parçacığı oluşturur, ancak UV_THREADPOOL_SIZE ortam değişkeni kullanılarak bu sayı artırılabilir.</p>"
                            },
                            {
                                "content": "<span class=\"font-semibold text-sm inline-block my-2\">Örnek: İş Parçacığı Havuzu Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">crypto</span> = <span class=\"require\">require</span>('<span class=\"string\">crypto</span>');\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"variable\">i</span> = <span class=\"number\">0</span>; <span class=\"variable\">i</span> &lt; <span class=\"number\">4</span>; <span class=\"variable\">i</span>++) {\n    <span class=\"variable\">crypto</span>.<span class=\"function\">pbkdf2</span>('<span class=\"string\">password</span>', '<span class=\"string\">salt</span>', <span class=\"number\">100000</span>, <span class=\"number\">64</span>, '<span class=\"string\">sha512</span>', (<span class=\"keyword\">err</span>, <span class=\"variable\">derivedKey</span>) =&gt; {\n        <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">err</span>;\n        <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"variable\">derivedKey</span>.<span class=\"function\">toString</span>('<span class=\"string\">hex</span>'));\n    });\n}\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">İş parçacığı havuzu kullanımı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, crypto.pbkdf2 fonksiyonu iş parçacığı havuzunu kullanır ve dört ayrı iş parçacığında paralel olarak çalışır.</span>"
                            }                        
                        ]
                    }
                ],
                "sonucContents": [
                    {
                        "id": "entryforObserver6",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Modüler Yapı ve npm</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, modüler bir yapıya sahiptir ve npm (Node Package Manager) ile genişletilebilir. Bu, geliştiricilerin projelerine kolayca üçüncü parti paketler eklemesini sağlar.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Basit Bir Modül Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto px-4\"><span class=\"text-gray-500\">// myModule.js</span>\n<span class=\"keyword\">module</span>.<span class=\"variable\">exports</span> = {\n    <span class=\"function\">sayHello</span>: function() {\n        console.<span class=\"function\">log</span>('<span class=\"string\">Hello, world!</span>');\n    }\n};\n\n<span class=\"text-gray-500\">// main.js</span>\n<span class=\"keyword\">const</span> myModule = <span class=\"require\">require</span>('./myModule');\nmyModule.<span class=\"function\">sayHello</span>();</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, myModule.js adlı bir modül oluşturulmuş ve main.js dosyasında bu modül kullanılmıştır.</span></div>"
                            }                     
                        ]
                    },
                    {
                        "id": "entryforObserver7",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Sonuç</h3><p class=\"leading-6 indent-4 mb-4\">Node.js runtime, modern web uygulamaları ve sunucu tarafı programlama için güçlü ve esnek bir ortam sağlar. V8 motoru, Libuv kütüphanesi, olay döngüsü ve asenkron I/O modeli, Node.js'in yüksek performans ve ölçeklenebilirlik sunmasını sağlar. Node.js'in modüler yapısı ve geniş npm ekosistemi, geliştiricilerin projelerini hızlı ve verimli bir şekilde geliştirmesine olanak tanır. Bu teknik inceleme, Node.js runtime ifadesinin derinlemesine anlaşılmasına katkıda bulunmayı amaçlamaktadır.</p>"
                            }
                        ]
                    }
                ]
            },
            "blogComments": {
                "blogCommentCounts": 2
            }
        },
        {
            "blogID": "abc12xyz2024",
            "blogAuthor": "Mehmet Güngör",
            "blogCTime": "21/July/2024",
            "blogTitle": "Node.js Çalışma Zamanı(Runtime) Nedir?",
            "blogMainImage": "/images/nojs-system.jpg",
            "blogShareLink": "-",
            "blogCardSummaryContent": "Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır.",
            "blogHeaders": {
                "giris": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk1", "href": "#entryforObserver1", "sHeader":"Node.js Çalışma Zamanı Nedir?"},
                        {"id": "navLİnk2", "href": "#entryforObserver2", "sHeader":"Node.js Runtime'ın Temel Bileşenleri"}
                    ]
                },
                "gelisme": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk3", "href": "#entryforObserver3", "sHeader":"Olay Döngüsünün İşleyişi"},
                        {"id": "navLİnk4", "href": "#entryforObserver4", "sHeader":"Asenkron ve Non-blocking I/O"},
                        {"id": "navLİnk5", "href": "#entryforObserver5", "sHeader":"İş Parçacığı Havuzu (Thread Pool)"}
                    ]
                },
                "sonuc": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk6", "href": "#entryforObserver6", "sHeader":"Modüler Yapı ve npm"},
                        {"id": "navLİnk7", "href": "#entryforObserver7", "sHeader":"Sonuç"}
                    ]
                }
            },
            "blogContents": {
                "girisContents": [
                    {
                        "id": "entryforObserver1",
                        "ctnrCount": 3,
                        "ordinaryContents": [
                            {
                                "content": "<h2 class=\"font-merriweather text-2xl sm:text-3xl md:text-4xl my-6 text-[#422d48] leading-[48px]\">Node.js Çalışma Zamanı(Runtime) Nedir?</h2>"
                            },
                            {
                                "content": "<img class=\"w-full block cursor-zoom-in my-8\" src=\"../../images/nojs-system.jpg\" alt=\"NodeJS Runtime\">"
                            },
                            {
                                "content": "<p class=\"leading-6 indent-4\">Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır. Bu makalede, Node.js runtime ifadesinin teknik detaylarını, iç yapılarını ve işleyişini derinlemesine inceleyeceğiz.</p>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver2",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Node.js Runtime'ın Temel Bileşenleri</h3>\n"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><h4 class=\"font-semibold\">V8 JavaScript Motoru</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">V8, Google'ın Chrome tarayıcısı için geliştirdiği yüksek performanslı JavaScript motorudur. V8, JavaScript kodunu makine diline çevirir ve doğrudan çalıştırır.</p></li><li><p class=\"\">Node.js, V8 motorunu kullanarak JavaScript'in sunucu tarafında hızlı ve verimli çalışmasını sağlar.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Libuv</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Libuv, asenkron I/O işlemlerini yöneten ve olay döngüsünü (event loop) sağlayan bir kütüphanedir. Libuv, platform bağımsızdır ve Node.js'in çeşitli işletim sistemlerinde çalışmasını mümkün kılar.</p></li><li><p class=\"\">Olay döngüsü, dosya sistemi, DNS, ağ ve diğer zamanlanmış işlemleri yönetir.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Olay Döngüsü (Event Loop)</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Olay döngüsü, Node.js'in çekirdeğinde yer alır ve tüm asenkron işlemleri yönetir. Olay döngüsü, tek bir iş parçacığı üzerinde çalışır ve non-blocking I/O işlemlerini etkin bir şekilde yönetir.</p></li></ul></li></ul>\n"
                            }
                        ]
                    }
                ],
                "gelismeContents": [
                    {
                        "id": "entryforObserver3",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Olay Döngüsünün İşleyişi</h3><p class=\"leading-6 indent-4 mb-4\">Olay döngüsü, Node.js'in en önemli bileşenlerinden biridir. Olay döngüsü, sürekli olarak çalışır ve farklı aşamalardan geçer. Bu aşamalar şunlardır:</p>"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><p><span class=\"font-semibold\">Timers:</span> setTimeout ve setInterval gibi zamanlayıcı fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Pending Callbacks:</span> Önceki döngüde tamamlanan bazı I/O işlemlerinin geri çağırma fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Idle, Prepare:</span> İç kullanım için ayrılmıştır ve genellikle geliştiriciler tarafından doğrudan kullanılmaz.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Poll:</span> Yeni I/O olaylarını alır ve uygun geri çağırma fonksiyonlarını çalıştırır. Bu aşama, olay döngüsünün kalbidir.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Check:</span> setImmediate ile zamanlanmış işlevler burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Close Callbacks:</span> Kapanış olaylarını (örneğin, socket.on('close')) işler.</p></li></ul>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver4",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Asenkron ve Non-blocking I/O</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, asenkron ve non-blocking I/O modelini benimseyerek yüksek performans sağlar. Bu model, bir I/O işleminin tamamlanmasını beklemeden diğer işlemlerin devam etmesine olanak tanır.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Non-blocking I/O</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">fs</span> = <span class=\"require\">require</span>('<span class=\"string\">fs</span>');\n\nfs.<span class=\"function\">readFile</span>('<span class=\"string\">example.txt</span>', '<span class=\"string\">utf-8</span>', (<span class=\"keyword\">err</span>, <span class=\"keyword\">data</span>) => {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) {\n        <span class=\"class\">console</span>.<span class=\"function\">error</span>(<span class=\"keyword\">err</span>);\n        <span class=\"keyword\">return</span>;\n    }\n    <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"keyword\">data</span>);\n});\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">Dosya okuma işlemi başlatıldı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, readFile fonksiyonu non-blocking bir şekilde çalışır ve dosya okuma işlemi tamamlanmadan console.log('Dosya okuma işlemi başlatıldı') satırı çalıştırılır. Bu, Node.js'in yüksek performanslı olmasını sağlayan temel mekanizmadır.</span></div>"
                            }                            
                        ]
                    },
                    {
                        "id": "entryforObserver5",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">İş Parçacığı Havuzu (Thread Pool)</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, CPU yoğun işlemler ve bazı I/O işlemleri için bir iş parçacığı havuzu kullanır. Varsayılan olarak, Node.js dört iş parçacığı oluşturur, ancak UV_THREADPOOL_SIZE ortam değişkeni kullanılarak bu sayı artırılabilir.</p>"
                            },
                            {
                                "content": "<span class=\"font-semibold text-sm inline-block my-2\">Örnek: İş Parçacığı Havuzu Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">crypto</span> = <span class=\"require\">require</span>('<span class=\"string\">crypto</span>');\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"variable\">i</span> = <span class=\"number\">0</span>; <span class=\"variable\">i</span> &lt; <span class=\"number\">4</span>; <span class=\"variable\">i</span>++) {\n    <span class=\"variable\">crypto</span>.<span class=\"function\">pbkdf2</span>('<span class=\"string\">password</span>', '<span class=\"string\">salt</span>', <span class=\"number\">100000</span>, <span class=\"number\">64</span>, '<span class=\"string\">sha512</span>', (<span class=\"keyword\">err</span>, <span class=\"variable\">derivedKey</span>) =&gt; {\n        <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">err</span>;\n        <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"variable\">derivedKey</span>.<span class=\"function\">toString</span>('<span class=\"string\">hex</span>'));\n    });\n}\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">İş parçacığı havuzu kullanımı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, crypto.pbkdf2 fonksiyonu iş parçacığı havuzunu kullanır ve dört ayrı iş parçacığında paralel olarak çalışır.</span>"
                            }                        
                        ]
                    }
                ],
                "sonucContents": [
                    {
                        "id": "entryforObserver6",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Modüler Yapı ve npm</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, modüler bir yapıya sahiptir ve npm (Node Package Manager) ile genişletilebilir. Bu, geliştiricilerin projelerine kolayca üçüncü parti paketler eklemesini sağlar.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Basit Bir Modül Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto px-4\"><span class=\"text-gray-500\">// myModule.js</span>\n<span class=\"keyword\">module</span>.<span class=\"variable\">exports</span> = {\n    <span class=\"function\">sayHello</span>: function() {\n        console.<span class=\"function\">log</span>('<span class=\"string\">Hello, world!</span>');\n    }\n};\n\n<span class=\"text-gray-500\">// main.js</span>\n<span class=\"keyword\">const</span> myModule = <span class=\"require\">require</span>('./myModule');\nmyModule.<span class=\"function\">sayHello</span>();</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, myModule.js adlı bir modül oluşturulmuş ve main.js dosyasında bu modül kullanılmıştır.</span></div>"
                            }                     
                        ]
                    },
                    {
                        "id": "entryforObserver7",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Sonuç</h3><p class=\"leading-6 indent-4 mb-4\">Node.js runtime, modern web uygulamaları ve sunucu tarafı programlama için güçlü ve esnek bir ortam sağlar. V8 motoru, Libuv kütüphanesi, olay döngüsü ve asenkron I/O modeli, Node.js'in yüksek performans ve ölçeklenebilirlik sunmasını sağlar. Node.js'in modüler yapısı ve geniş npm ekosistemi, geliştiricilerin projelerini hızlı ve verimli bir şekilde geliştirmesine olanak tanır. Bu teknik inceleme, Node.js runtime ifadesinin derinlemesine anlaşılmasına katkıda bulunmayı amaçlamaktadır.</p>"
                            }
                        ]
                    }
                ]
            },
            "blogComments": {
                "blogCommentCounts": 9
            }
        },
        {
            "blogID": "abc13xyz2024",
            "blogAuthor": "Yakup Arslan",
            "blogCTime": "21/July/2024",
            "blogTitle": "Node.js Çalışma Zamanı(Runtime) Nedir?",
            "blogMainImage": "/images/nojs-system.jpg",
            "blogShareLink": "-",
            "blogCardSummaryContent": "Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır.",
            "blogHeaders": {
                "giris": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk1", "href": "#entryforObserver1", "sHeader":"Node.js Çalışma Zamanı Nedir?"},
                        {"id": "navLİnk2", "href": "#entryforObserver2", "sHeader":"Node.js Runtime'ın Temel Bileşenleri"}
                    ]
                },
                "gelisme": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk3", "href": "#entryforObserver3", "sHeader":"Olay Döngüsünün İşleyişi"},
                        {"id": "navLİnk4", "href": "#entryforObserver4", "sHeader":"Asenkron ve Non-blocking I/O"},
                        {"id": "navLİnk5", "href": "#entryforObserver5", "sHeader":"İş Parçacığı Havuzu (Thread Pool)"}
                    ]
                },
                "sonuc": {
                    "girisTitle": "",
                    "subTitles": [
                        {"id": "navLİnk6", "href": "#entryforObserver6", "sHeader":"Modüler Yapı ve npm"},
                        {"id": "navLİnk7", "href": "#entryforObserver7", "sHeader":"Sonuç"}
                    ]
                }
            },
            "blogContents": {
                "girisContents": [
                    {
                        "id": "entryforObserver1",
                        "ctnrCount": 3,
                        "ordinaryContents": [
                            {
                                "content": "<h2 class=\"font-merriweather text-2xl sm:text-3xl md:text-4xl my-6 text-[#422d48] leading-[48px]\">Node.js Çalışma Zamanı(Runtime) Nedir?</h2>"
                            },
                            {
                                "content": "<img class=\"w-full block cursor-zoom-in my-8\" src=\"../../images/nojs-system.jpg\" alt=\"NodeJS Runtime\">"
                            },
                            {
                                "content": "<p class=\"leading-6 indent-4\">Node.js, sunucu tarafında JavaScript çalıştırmayı mümkün kılan, olay güdümlü, asenkron I/O modeli üzerine inşa edilmiş bir runtime ortamıdır. Bu makalede, Node.js runtime ifadesinin teknik detaylarını, iç yapılarını ve işleyişini derinlemesine inceleyeceğiz.</p>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver2",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Node.js Runtime'ın Temel Bileşenleri</h3>\n"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><h4 class=\"font-semibold\">V8 JavaScript Motoru</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">V8, Google'ın Chrome tarayıcısı için geliştirdiği yüksek performanslı JavaScript motorudur. V8, JavaScript kodunu makine diline çevirir ve doğrudan çalıştırır.</p></li><li><p class=\"\">Node.js, V8 motorunu kullanarak JavaScript'in sunucu tarafında hızlı ve verimli çalışmasını sağlar.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Libuv</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Libuv, asenkron I/O işlemlerini yöneten ve olay döngüsünü (event loop) sağlayan bir kütüphanedir. Libuv, platform bağımsızdır ve Node.js'in çeşitli işletim sistemlerinde çalışmasını mümkün kılar.</p></li><li><p class=\"\">Olay döngüsü, dosya sistemi, DNS, ağ ve diğer zamanlanmış işlemleri yönetir.</p></li></ul></li><li class=\"mb-2\"><h4 class=\"font-semibold\">Olay Döngüsü (Event Loop)</h4><ul class=\"list-disc ml-3 sm:ml-5\"><li><p class=\"\">Olay döngüsü, Node.js'in çekirdeğinde yer alır ve tüm asenkron işlemleri yönetir. Olay döngüsü, tek bir iş parçacığı üzerinde çalışır ve non-blocking I/O işlemlerini etkin bir şekilde yönetir.</p></li></ul></li></ul>\n"
                            }
                        ]
                    }
                ],
                "gelismeContents": [
                    {
                        "id": "entryforObserver3",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Olay Döngüsünün İşleyişi</h3><p class=\"leading-6 indent-4 mb-4\">Olay döngüsü, Node.js'in en önemli bileşenlerinden biridir. Olay döngüsü, sürekli olarak çalışır ve farklı aşamalardan geçer. Bu aşamalar şunlardır:</p>"
                            },
                            {
                                "content": "<ul class=\"leading-6 list-decimal ml-7\"><li class=\"mb-2\"><p><span class=\"font-semibold\">Timers:</span> setTimeout ve setInterval gibi zamanlayıcı fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Pending Callbacks:</span> Önceki döngüde tamamlanan bazı I/O işlemlerinin geri çağırma fonksiyonları burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Idle, Prepare:</span> İç kullanım için ayrılmıştır ve genellikle geliştiriciler tarafından doğrudan kullanılmaz.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Poll:</span> Yeni I/O olaylarını alır ve uygun geri çağırma fonksiyonlarını çalıştırır. Bu aşama, olay döngüsünün kalbidir.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Check:</span> setImmediate ile zamanlanmış işlevler burada çalıştırılır.</p></li><li class=\"mb-2\"><p><span class=\"font-semibold\">Close Callbacks:</span> Kapanış olaylarını (örneğin, socket.on('close')) işler.</p></li></ul>"
                            }
                        ]
                    },
                    {
                        "id": "entryforObserver4",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Asenkron ve Non-blocking I/O</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, asenkron ve non-blocking I/O modelini benimseyerek yüksek performans sağlar. Bu model, bir I/O işleminin tamamlanmasını beklemeden diğer işlemlerin devam etmesine olanak tanır.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Non-blocking I/O</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">fs</span> = <span class=\"require\">require</span>('<span class=\"string\">fs</span>');\n\nfs.<span class=\"function\">readFile</span>('<span class=\"string\">example.txt</span>', '<span class=\"string\">utf-8</span>', (<span class=\"keyword\">err</span>, <span class=\"keyword\">data</span>) => {\n    <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) {\n        <span class=\"class\">console</span>.<span class=\"function\">error</span>(<span class=\"keyword\">err</span>);\n        <span class=\"keyword\">return</span>;\n    }\n    <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"keyword\">data</span>);\n});\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">Dosya okuma işlemi başlatıldı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, readFile fonksiyonu non-blocking bir şekilde çalışır ve dosya okuma işlemi tamamlanmadan console.log('Dosya okuma işlemi başlatıldı') satırı çalıştırılır. Bu, Node.js'in yüksek performanslı olmasını sağlayan temel mekanizmadır.</span></div>"
                            }                            
                        ]
                    },
                    {
                        "id": "entryforObserver5",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">İş Parçacığı Havuzu (Thread Pool)</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, CPU yoğun işlemler ve bazı I/O işlemleri için bir iş parçacığı havuzu kullanır. Varsayılan olarak, Node.js dört iş parçacığı oluşturur, ancak UV_THREADPOOL_SIZE ortam değişkeni kullanılarak bu sayı artırılabilir.</p>"
                            },
                            {
                                "content": "<span class=\"font-semibold text-sm inline-block my-2\">Örnek: İş Parçacığı Havuzu Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto pr-4\"><span class=\"keyword\">const</span> <span class=\"variable\">crypto</span> = <span class=\"require\">require</span>('<span class=\"string\">crypto</span>');\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"variable\">i</span> = <span class=\"number\">0</span>; <span class=\"variable\">i</span> &lt; <span class=\"number\">4</span>; <span class=\"variable\">i</span>++) {\n    <span class=\"variable\">crypto</span>.<span class=\"function\">pbkdf2</span>('<span class=\"string\">password</span>', '<span class=\"string\">salt</span>', <span class=\"number\">100000</span>, <span class=\"number\">64</span>, '<span class=\"string\">sha512</span>', (<span class=\"keyword\">err</span>, <span class=\"variable\">derivedKey</span>) =&gt; {\n        <span class=\"keyword\">if</span> (<span class=\"keyword\">err</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">err</span>;\n        <span class=\"class\">console</span>.<span class=\"function\">log</span>(<span class=\"variable\">derivedKey</span>.<span class=\"function\">toString</span>('<span class=\"string\">hex</span>'));\n    });\n}\n\n<span class=\"class\">console</span>.<span class=\"function\">log</span>('<span class=\"string\">İş parçacığı havuzu kullanımı</span>');</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, crypto.pbkdf2 fonksiyonu iş parçacığı havuzunu kullanır ve dört ayrı iş parçacığında paralel olarak çalışır.</span>"
                            }                        
                        ]
                    }
                ],
                "sonucContents": [
                    {
                        "id": "entryforObserver6",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Modüler Yapı ve npm</h3><p class=\"leading-6 indent-4 mb-4\">Node.js, modüler bir yapıya sahiptir ve npm (Node Package Manager) ile genişletilebilir. Bu, geliştiricilerin projelerine kolayca üçüncü parti paketler eklemesini sağlar.</p>"
                            },
                            {
                                "content": "<div class=\"my-4\"><span class=\"font-semibold text-sm inline-block my-2\">Örnek: Basit Bir Modül Kullanımı</span><div class=\"rounded-lg overflow-hidden\"><div class=\"bg-[#262626]\"><div><span class=\"inline-block text-[#efefef] text-sm cursor-pointer px-4 py-1\">Node.js</span></div></div><pre class=\"bg-[#000000] p-4 overflow-auto\"><code class=\"code-block overflow-auto px-4\"><span class=\"text-gray-500\">// myModule.js</span>\n<span class=\"keyword\">module</span>.<span class=\"variable\">exports</span> = {\n    <span class=\"function\">sayHello</span>: function() {\n        console.<span class=\"function\">log</span>('<span class=\"string\">Hello, world!</span>');\n    }\n};\n\n<span class=\"text-gray-500\">// main.js</span>\n<span class=\"keyword\">const</span> myModule = <span class=\"require\">require</span>('./myModule');\nmyModule.<span class=\"function\">sayHello</span>();</code></pre></div><span class=\"font-semibold text-sm inline-block my-2 indent-4\">Bu örnekte, myModule.js adlı bir modül oluşturulmuş ve main.js dosyasında bu modül kullanılmıştır.</span></div>"
                            }                     
                        ]
                    },
                    {
                        "id": "entryforObserver7",
                        "ctnrCount": 2,
                        "ordinaryContents": [
                            {
                                "content": "<h3 class=\"text-xl font-semibold mb-4\">Sonuç</h3><p class=\"leading-6 indent-4 mb-4\">Node.js runtime, modern web uygulamaları ve sunucu tarafı programlama için güçlü ve esnek bir ortam sağlar. V8 motoru, Libuv kütüphanesi, olay döngüsü ve asenkron I/O modeli, Node.js'in yüksek performans ve ölçeklenebilirlik sunmasını sağlar. Node.js'in modüler yapısı ve geniş npm ekosistemi, geliştiricilerin projelerini hızlı ve verimli bir şekilde geliştirmesine olanak tanır. Bu teknik inceleme, Node.js runtime ifadesinin derinlemesine anlaşılmasına katkıda bulunmayı amaçlamaktadır.</p>"
                            }
                        ]
                    }
                ]
            },
            "blogComments": {
                "blogCommentCounts": 9
            }
        }
    ]
}